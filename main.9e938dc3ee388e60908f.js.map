{"version":3,"sources":["webpack:///./index.js","webpack:///./js/timer.js"],"names":["selector","targetDate","Date","now","this","timer","document","querySelector","dateRef","daysRef","hoursRef","minsRef","secsRef","timerID","getDifference","renderTimer","time","days","Math","floor","hours","mins","secs","textContent","toDateString","start","setInterval","stop","clearInterval"],"mappings":"kHAAA,4B,mBC8Dc,I,WA7DZ,cAAgE,QAAlDA,gBAAkD,MAAvC,WAAuC,MAA3BC,kBAA2B,MAAdC,KAAKC,MAAS,EAC9DC,KAAKH,WAAa,IAAIC,KAAKD,GAE3BG,KAAKC,MAAQC,SAASC,cAAT,GAA0BP,GACvCI,KAAKI,QAAUJ,KAAKC,MAAME,cAAc,uBAExCH,KAAKK,QAAUL,KAAKC,MAAME,cAAc,uBACxCH,KAAKM,SAAWN,KAAKC,MAAME,cAAc,wBACzCH,KAAKO,QAAUP,KAAKC,MAAME,cAAc,uBACxCH,KAAKQ,QAAUR,KAAKC,MAAME,cAAc,uBAExCH,KAAKS,QAAU,K,2BAEjBC,cAAA,WACE,OAAOV,KAAKH,WAAaC,KAAKC,O,EAEhCY,YAAA,WACE,IAAMC,EAAOZ,KAAKU,gBAClB,KAAIE,EAAO,GAAX,CAMA,IAAMC,EAAOC,KAAKC,MAAMH,EAAO,OAOzBI,EAAQF,KAAKC,MAAOH,EAAO,MAAR,MAMnBK,EAAOH,KAAKC,MAAOH,EAAO,KAAR,KAMlBM,EAAOJ,KAAKC,MAAOH,EAAO,IAAe,KAE/CZ,KAAKI,QAAQe,YAAcnB,KAAKH,WAAWuB,eAC3CpB,KAAKK,QAAQc,YAAcN,EAC3Bb,KAAKM,SAASa,YAAcH,EAC5BhB,KAAKO,QAAQY,YAAcF,EAC3BjB,KAAKQ,QAAQW,YAAcD,I,EAE7BG,MAAA,WAAQ,WACNrB,KAAKS,QAAUa,aAAY,WACzB,EAAKX,gBACJ,M,EAELY,KAAA,WACEC,cAAcxB,KAAKS,U,KAIT,CAAmB,CAC/Bb,SAAU,WACVC,WAAY,iBAGRwB,U","file":"main.9e938dc3ee388e60908f.js","sourcesContent":["import css from \"./css/styles.css\";\r\n\r\nimport \"./js/timer\";","class CountdownTimer {\r\n  constructor({ selector = \"#timer-1\", targetDate = Date.now() }) {\r\n    this.targetDate = new Date(targetDate);\r\n\r\n    this.timer = document.querySelector(`${selector}`);\r\n    this.dateRef = this.timer.querySelector('[data-value=\"date\"]');\r\n\r\n    this.daysRef = this.timer.querySelector('[data-value=\"days\"]');\r\n    this.hoursRef = this.timer.querySelector('[data-value=\"hours\"]');\r\n    this.minsRef = this.timer.querySelector('[data-value=\"mins\"]');\r\n    this.secsRef = this.timer.querySelector('[data-value=\"secs\"]');\r\n\r\n    this.timerID = null;\r\n  }\r\n  getDifference() {\r\n    return this.targetDate - Date.now();\r\n  }\r\n  renderTimer() {\r\n    const time = this.getDifference();\r\n    if (time < 0) return;\r\n\r\n    /*\r\n    * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n    * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n    */\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    \r\n    /*\r\n    * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n    * остатка % и делим его на количество миллисекунд в одном часе\r\n    * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n    */\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n    /*\r\n    * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n    * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n    */\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n    /*\r\n    * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n    * миллисекунд в одной секунде (1000)\r\n    */\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n    this.dateRef.textContent = this.targetDate.toDateString();\r\n    this.daysRef.textContent = days;\r\n    this.hoursRef.textContent = hours;\r\n    this.minsRef.textContent = mins;\r\n    this.secsRef.textContent = secs;\r\n  }\r\n  start() {\r\n    this.timerID = setInterval(() => {\r\n      this.renderTimer();\r\n    }, 1000);\r\n  }\r\n  stop() {\r\n    clearInterval(this.timerID);\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: \"#timer-1\",\r\n  targetDate: \"Oct 24, 2021\",\r\n});\r\n\r\ntimer.start();"],"sourceRoot":""}